name: Test-OpenOCD

on:
  workflow_call:

jobs:

  tests:
    name: Run OpenOCD tests
    runs-on: ubuntu-latest
    container: ghcr.io/antmicro/cores-veer-el2:latest
    strategy:
      fail-fast: false
      matrix:
        coverage: ["all", "branch", "toggle"] #TODO: add functional coverage
        bus: ["axi4", "ahb_lite"]
    env:
      DEBIAN_FRONTEND: "noninteractive"
      CCACHE_DIR: "/opt/openocd-tests/.cache/"

    steps:
      - name: Install utils
        run: |
          sudo apt -qqy update && sudo apt -qqy --no-install-recommends install \
             ccache ninja-build gcc-riscv64-unknown-elf
          pip3 install meson
          wget https://github.com/riscv-collab/riscv-gnu-toolchain/releases/download/2024.09.03/riscv64-elf-ubuntu-22.04-gcc-nightly-2024.09.03-nightly.tar.gz
          tar -xzf riscv64-elf-ubuntu-22.04-gcc-nightly-2024.09.03-nightly.tar.gz
          mv riscv /opt/

      - name: Setup Cache Metadata
        id: cache_metadata
        run: |
          date=$(date +"%Y_%m_%d")
          time=$(date +"%Y%m%d_%H%M%S_%N")
          cache_test_restore_key=${{ matrix.coverage }}_
          cache_test_key=${cache_test_restore_key}${time}
          echo "date=$date" | tee -a "$GITHUB_ENV"
          echo "time=$time" | tee -a "$GITHUB_ENV"
          echo "cache_test_restore_key=$cache_test_restore_key" | tee -a "$GITHUB_ENV"
          echo "cache_test_key=$cache_test_key" | tee -a "$GITHUB_ENV"

      - name: Setup repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: install SiteSpawner package
        shell: bash
        run: |
          python3 -m venv .venv
          .venv/bin/python3 -m pip install tools/SiteSpawner
          source .venv/bin/activate
          echo "PATH=$PATH" >> $GITHUB_ENV
          python3 -m pip install tools/SiteSpawner

      - name: Build verilated simulation
        shell: bash
        run: |
          export PATH=/opt/verilator/bin:/opt/openocd/bin:$PATH
          export RV_ROOT=$(pwd)
          mkdir run
          make -C run -f ${RV_ROOT}/tools/Makefile verilator-build program.hex TEST=infinite_loop \
            CONF_PARAMS="-set build_${{ matrix.bus }} -set openocd_test" COVERAGE=${{ matrix.coverage }} -j$(nproc)
          cd run
          ${RV_ROOT}/.github/scripts/openocd_test.sh \
            -f ${RV_ROOT}/testbench/openocd_scripts/verilator-rst.cfg \
            -f ${RV_ROOT}/testbench/openocd_scripts/jtag_cg.tcl
          pkill openocd || true

      - name: Test with GDB-test (register access, memory access, breakpoints)
        run: |
          # TODO GDB is in /opt/riscv and a separate toolchain is installed with apt. Make this better.
          export PATH=/opt/riscv/bin:/opt/verilator/bin:/opt/openocd/bin:$PATH
          export RV_ROOT=$(pwd)
          mkdir gdb_test
          make -C gdb_test -f ${RV_ROOT}/tools/Makefile verilator-build program.hex TEST=infinite_loop \
            CONF_PARAMS="-set build_${{ matrix.bus }} -set openocd_test" COVERAGE=${{ matrix.coverage }} -j$(nproc)
          cd gdb_test
          ${RV_ROOT}/.github/scripts/gdb_test.sh \
            /bin/bash -c 'cd ${RV_ROOT}/.github/scripts && ./dump_and_compare.sh' || true
          pkill openocd || true

      - name: Prepare coverage data
        shell: bash
        run: |
          export PATH=/opt/verilator/bin:$PATH
          export RV_ROOT=$(pwd)
          sis -d convert --dat-dir ${RV_ROOT}/run
          sis -d convert --dat-dir ${RV_ROOT}/gdb_test
          mkdir -p results
          mv ${RV_ROOT}/run/coverage.info \
             results/coverage_openocd_${{ matrix.bus }}_${{ matrix.coverage }}.info
          mv ${RV_ROOT}/gdb_test/coverage.info \
             results/coverage_openocd_gdb_test_${{ matrix.bus }}_${{ matrix.coverage }}.info

      - name: Pack artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: openocd_coverage_data
          path: results/*.info
