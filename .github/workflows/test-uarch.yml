name: VeeR-EL2 Microarchitectural tests

on:
  workflow_call:

jobs:
  lint:
    name: Lint microarchitectural tests
    runs-on: ubuntu-latest
    container: ghcr.io/antmicro/cores-veer-el2:20250103160559
    steps:
      - name: Setup repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup environment
        shell: bash
        run: |
          RV_ROOT=`pwd`
          echo "RV_ROOT=$RV_ROOT" >> $GITHUB_ENV
          PYTHONUNBUFFERED=1
          echo "PYTHONUNBUFFERED=$PYTHONUNBUFFERED" >> $GITHUB_ENV

          TEST_PATH=$RV_ROOT/verification/block
          echo "TEST_PATH=$TEST_PATH" >> $GITHUB_ENV

          python3 -m venv .venv
          source .venv/bin/activate
          python3 -m pip install nox
      - name: Lint
        shell: bash
        run: |
          source .venv/bin/activate
          pushd ${TEST_PATH}
            nox -s test_lint
          popd
  tests:
    name: Microarchitectural tests
    runs-on: ubuntu-latest
    container: ghcr.io/antmicro/cores-veer-el2:20250103160559
    strategy:
      matrix:
        test:
          - "block/pic"
          - "block/pic_gw"
          - "block/dma"
          - "block/ifu_compress"
          - "block/dec_tl"
          - "block/dec_ib"
          - "block/exu_alu"
          - "block/exu_mul"
          - "block/exu_div"
          - "block/iccm"
          - "block/dccm"
          - "block/lib_axi4_to_ahb"
          - "block/lib_ahb_to_axi4"
          - "block/pmp"
          - "block/pmp_random"
          - "block/dec_pmp_ctl"
          - "block/dmi"
          - "block/lsu_tl"
          - "block/dec_tlu_ctl"
          - "block/dcls"
    env:
      CCACHE_DIR: "/opt/verification/.cache/"
      DEBIAN_FRONTEND: "noninteractive"
    steps:
      - name: Setup repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install coverage dependencies
        shell: bash
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip install -r .github/scripts/requirements-coverage.txt
          python3 -m pip install meson nox

      - name: Install prerequisities
        run: |
          sudo apt -qqy update && sudo apt -qqy --no-install-recommends install \
            autoconf automake autotools-dev \
            bc bison build-essential \
            ccache curl \
            flex \
            gawk gcc-riscv64-unknown-elf git gperf \
            help2man \
            libexpat-dev libfl-dev libfl2 libgmp-dev \
            libmpc-dev libmpfr-dev libpython3-all-dev libtool \
            ninja-build \
            patchutils python3 python3-dev python3-pip \
            texinfo \
            zlib1g zlib1g-dev

      - name: Setup environment
        shell: bash
        run: |
          echo "/opt/verilator/bin" >> $GITHUB_PATH
          RV_ROOT=`pwd`
          echo "RV_ROOT=$RV_ROOT" >> $GITHUB_ENV
          PYTHONUNBUFFERED=1
          echo "PYTHONUNBUFFERED=$PYTHONUNBUFFERED" >> $GITHUB_ENV

          TEST_TYPE=`echo ${{ matrix.test }} | cut -d'/' -f1`
          TEST_NAME=`echo ${{ matrix.test }} | cut -d'/' -f2`
          TEST_PATH=$RV_ROOT/verification/${TEST_TYPE}

          echo "TEST_TYPE=$TEST_TYPE" >> $GITHUB_ENV
          echo "TEST_NAME=$TEST_NAME" >> $GITHUB_ENV
          echo "TEST_PATH=$TEST_PATH" >> $GITHUB_ENV

          # Fix random generator seed
          echo "RANDOM_SEED=1377424946" >> $GITHUB_ENV

      - name: Run ${{ matrix.test }}
        shell: bash
        run: |
          source .venv/bin/activate
          pushd ${TEST_PATH}
            nox -s ${TEST_NAME}_verify
          popd

      - name: Prepare coverage data
        shell: bash
        run: |
          export PATH=/opt/verilator/bin:$PATH
          source .venv/bin/activate
          sis -d convert --dat-dir ${TEST_PATH}/${TEST_NAME}/
          mkdir -p results
          mv ${TEST_PATH}/${TEST_NAME}/*.info results/

          # Prefix coverage results
          pushd results
            for OLD_NAME in *.info; do
              NEW_NAME=${OLD_NAME/coverage_/coverage_${TEST_NAME}_}
              echo "renaming '${OLD_NAME}' to '${NEW_NAME}'"
              mv ${OLD_NAME} ${NEW_NAME}
            done
          popd

      - name: Upload coverage data artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: uarch_tests_coverage_data
          path: ./results/*.info

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: uarch_tests_logs
          path: |
            verification/${{ matrix.test }}/*.log
            verification/${{ matrix.test }}/*.vcd

  custom_tests:
    name: Run custom Microarchitectural tests
    runs-on: [ self-hosted, Linux, X64, gcp-custom-runners ]
    container: centos:8
    env:
      GHA_EXTERNAL_DISK: additional-tools
      GHA_SA: gh-sa-veer-uploader
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Perform custom tests
        run: _secret_custom_uarch
