name: VeeR-EL2 verification

on:
  workflow_call:

env:
  VERILATOR_VERSION: v5.010

jobs:
  tests:
    name: Verification tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test: ["test_pyuvm"]
        coverage: ["all", "branch", "toggle"] #TODO: add functional coverage
    env:
      CCACHE_DIR: "/opt/verification/.cache/"
      VERILATOR_VERSION: v5.010
      DEBIAN_FRONTEND: "noninteractive"
    steps:
      - name: Setup repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Cache Metadata
        id: cache_metadata
        run: |
          date=$(date +"%Y_%m_%d")
          time=$(date +"%Y%m%d_%H%M%S_%N")
          cache_verilator_restore_key=cache_verilator_
          cache_verilator_key=${cache_verilator_restore_key}${{ env.VERILATOR_VERSION }}
          cache_test_restore_key=${{ matrix.test }}_${{ matrix.coverage }}_
          cache_test_key=${cache_test_restore_key}${time}

          echo "date=$date" | tee -a "$GITHUB_ENV"
          echo "time=$time" | tee -a "$GITHUB_ENV"
          echo "cache_verilator_restore_key=$cache_verilator_restore_key" | tee -a "$GITHUB_ENV"
          echo "cache_verilator_key=$cache_verilator_key" | tee -a "$GITHUB_ENV"
          echo "cache_test_restore_key=$cache_test_restore_key" | tee -a "$GITHUB_ENV"
          echo "cache_test_key=$cache_test_key" | tee -a "$GITHUB_ENV"


      - name: Restore verilator cache
        id: cache-verilator-restore
        uses: actions/cache/restore@v3
        with:
          path: |
            /opt/verilator
            /opt/verilator/.cache
          key: ${{ env.cache_verilator_key }}
          restore-keys: ${{ env.cache_verilator_restore_key }}

      - name: Setup tests cache
        uses: actions/cache@v3
        id: cache-test-setup
        with:
          path: |
            ${{ env.CCACHE_DIR }}
          key: ${{ env.cache_test_key }}
          restore-keys: ${{ env.cache_test_restore_key }}

      - name: Install prerequisities
        run: |
          sudo apt -qqy update && sudo apt -qqy --no-install-recommends install \
            autoconf automake autotools-dev \
            bc bison build-essential \
            ccache cpanminus curl \
            flex \
            gawk gcc-riscv64-unknown-elf git gperf \
            help2man \
            libexpat-dev libfl-dev libfl2 libgmp-dev \
            libmpc-dev libmpfr-dev libpython3-all-dev libtool \
            ninja-build \
            patchutils python3 python3-dev python3-pip \
            texinfo \
            zlib1g zlib1g-dev
          sudo cpanm Bit::Vector

      - name: Setup environment
        run: |
          echo "/opt/verilator/bin" >> $GITHUB_PATH
          RV_ROOT=`pwd`
          echo "RV_ROOT=$RV_ROOT" >> $GITHUB_ENV
          PYTHONUNBUFFERED=1
          echo "PYTHONUNBUFFERED=$PYTHONUNBUFFERED" >> $GITHUB_ENV
          TEST_PATH=$RV_ROOT/verification/top/${{ matrix.test }}
          echo "TEST_PATH=$TEST_PATH" >> $GITHUB_ENV

      - name: Run ${{ matrix.test }}
        run: |
          pip3 install meson
          pip3 install -r $RV_ROOT/verification/top/requirements.txt
          PYTEST_STYLE_SRC_DIR=${{ github.workspace }}/.github/scripts/pytest/
          PYTEST_CSS=${PYTEST_STYLE_SRC_DIR}/css/styles.css
          HTML_FILE=${{ matrix.test }}_${{ matrix.COVERAGE }}.html
          pushd ${TEST_PATH}
            python -m pytest ${{ matrix.test }}.py -sv --coverage=${{ matrix.COVERAGE }} --html=$HTML_FILE --md=$GITHUB_STEP_SUMMARY --css=$PYTEST_CSS
            bash ${PYTEST_STYLE_SRC_DIR}/style_pytest_report.sh ${PYTEST_STYLE_SRC_DIR} ${TEST_PATH} ${HTML_FILE}
          popd

      - name: Prepare pytest-html data
        run: |
          pushd ${{ github.workspace }}
            WEBPAGE_DIR=webpage_${{ matrix.test }}_${{ matrix.COVERAGE }}
            mkdir -p $WEBPAGE_DIR
            mv ${TEST_PATH}/${{ matrix.test }}_${{ matrix.COVERAGE }}.html $WEBPAGE_DIR
            mv ${TEST_PATH}/assets $WEBPAGE_DIR
            JS_SCRIPT_DIR=${{ github.workspace }}/.github/scripts/pytest/script
            mv $JS_SCRIPT_DIR $WEBPAGE_DIR
          popd

      - name: Prepare coverage data
        run: |
          export PATH=/opt/verilator/bin:$PATH
          .github/scripts/convert_coverage_data.sh ${TEST_PATH}/coverage.dat
          echo "convert_coverage_data.sh exited with RET_CODE = "$?
          mkdir -p results
          mv ${TEST_PATH}/coverage.info \
             results/coverage_${{ matrix.test }}_${{ matrix.coverage }}.info

      - name: Upload pytest-html artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: verification_dashboard
          path: |
            webpage_*

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: verification_tests_coverage_data
          path: results/*.info
